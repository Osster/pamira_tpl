@mixin transition($time: 0.3s, $effect: ease-in-out) {
  -webkit-transition: all $time $effect;
  -o-transition: all $time $effect;
  -moz-transition: all $time $effect;
  transition: all $time $effect;
}



@mixin descktop($breakpoints: $grid-breakpoints) {
  $minW: breakpoint-min(xl, $breakpoints);
  @media (min-width: $minW) and (orientation: landscape) {
    /* descktop */
    @content;
  }
}

@mixin descktopxxl($breakpoints: $grid-breakpoints) {
  $minW: breakpoint-min(xxl, $breakpoints);
  @media (min-width: $minW) and (orientation: landscape) {
    /* descktop */
    @content;
  }
}

@mixin tablet-portrait($breakpoints: $grid-breakpoints) {
  $minW: breakpoint-min(sm, $breakpoints);
  $minH: breakpoint-min(md, $breakpoints);
  $maxW: breakpoint-min(md, $breakpoints);
  $maxH: breakpoint-min(xl, $breakpoints);
  @media (min-width: $minW) and (max-width: $maxW) and (min-height: $minH) and (orientation: portrait) {
    /* tablet-portrait */
    @content;
  }
}

@mixin tablet-landscape($breakpoints: $grid-breakpoints) {
  $minW: breakpoint-min(md, $breakpoints);
  $minH: breakpoint-min(sm, $breakpoints);
  $maxW: breakpoint-min(xl, $breakpoints);
  $maxH: breakpoint-min(md, $breakpoints);
  @media (min-width: $minW) and (max-width: $maxW) and (min-height: $minH) and (max-height: $maxH) and (orientation: landscape) {
    /* tablet-landscape */
    @content;
  }
}

@mixin tablet-all($breakpoints: $grid-breakpoints) {
  $minW: breakpoint-min(md, $breakpoints);
  $minH: breakpoint-min(sm, $breakpoints);
  $maxW: breakpoint-min(xl, $breakpoints);
  $maxH: breakpoint-min(md, $breakpoints);
  @media (min-width: $minW) and (max-width: $maxW) and (min-height: $minH) and (max-height: $maxH) and (orientation: landscape),
  (min-width: $minH) and (max-width: $maxH) and (min-height: $minW) and (max-height: $maxW) and (orientation: portrait) {
    /* tablet-all */
    @content;
  }
}

@mixin mobile-portrait($breakpoints: $grid-breakpoints) {
  $maxW: breakpoint-min(sm, $breakpoints);
  $maxH: breakpoint-min(md, $breakpoints);
  @media (max-width: $maxW) and (max-height: $maxH) and (orientation: portrait) {
    /* mobile-portrait */
    @content;
  }
}

@mixin mobile-landscape($breakpoints: $grid-breakpoints) {
  $maxW: breakpoint-min(md, $breakpoints);
  $maxH: breakpoint-min(sm, $breakpoints);
  @media (max-width: $maxW) and (max-height: $maxH) and (orientation: landscape) {
    /* mobile-landscape */
    @content;
  }
}
@mixin mobile-all($breakpoints: $grid-breakpoints) {
  $maxW: breakpoint-min(md, $breakpoints);
  $maxH: breakpoint-min(sm, $breakpoints);
  @media (max-width: $maxW) and (max-height: $maxH) and (orientation: landscape), (max-width: $maxH) and (max-height: $maxW) and (orientation: portrait) {
    /* mobile-all */
    @content;
  }
}

@mixin transition($prop: all, $time: .3s, $ease: ease-in) {
  -webkit-transition: $prop $time $ease;
  -moz-transition: $prop $time $ease;
  -ms-transition: $prop $time $ease;
  -o-transition: $prop $time $ease;
  transition: $prop $time $ease;
}

// MEDIA BREAKPOINTS
$breakpoints: (
        xs: 0,
        sm: 576,
        md: 768,
        lg: 992,
        xl: 1280,
        xxl: 1560
) !default;

$media-direction: max !default;

@mixin css_property($property, $value) {
  @if type_of($value) == string {
    #{$property}: unquote($value);
  } @else {
    #{$property}: $value;
  }
}

@function splitScreens($string, $seperator) {
  $string: inspect(quote($string));
  $sepId: str-index(quote($string), $seperator);
  @if ($sepId) {
    $array: (quote(str-slice($string, 0, $sepId - 1)), quote(str-slice($string, $sepId + 1)));
    @return $array;
  } @else {
    @return $string;
  }
}

//@media screen
@mixin media($properties, $orientation: false) {

  @each $property, $value in $properties {
    @if type_of($value) == 'map' {
      @each $screen, $val in $value {
        $screen: splitScreens($screen, '-');
        @if type_of($screen) == 'list' {
          $min_screen: nth($screen, 1);
          $max_screen: nth($screen, 2);
          @if $min_screen == min or $min_screen == max {
            $media-direction: $min_screen;
            @if $orientation {
              @if map-has-key($breakpoints, $max_screen) {
                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              } @else {
                @media only screen and (#{$media-direction}-width: $max_screen + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              }
            } @else {
              @if map-has-key($breakpoints, $max_screen) {
                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px') {
                  @include css_property($property, $val);
                }
              } @else {
                @media only screen and (#{$media-direction}-width: $max_screen + 'px') {
                  @include css_property($property, $val);
                }
              }
            }
          } @else {
            @if $orientation {
              @if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              } @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              } @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              } @else {
                @media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              }
            } @else {
              @if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') {
                  @include css_property($property, $val);
                }
              } @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px') {
                  @include css_property($property, $val);
                }
              } @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
                @media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') {
                  @include css_property($property, $val);
                }
              } @else {
                @media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px') {
                  @include css_property($property, $val);
                }
              }
            }
          }
        } @else {
          @if $screen == 'print' {
            @media print {
              @include css_property($property, $val);
            }
          } @else {
            @if $orientation {
              @if map-has-key($breakpoints, $screen) {
                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px') and (orientation: $orientation) {
                  @include css_property($property, $val);
                }
              } @else {
                @if $screen == all {
                  @media only screen and (orientation: $orientation) {
                    @include css_property($property, $val);
                  }
                } @else {
                  @media only screen and (#{$media-direction}-width: $screen + 'px') and (orientation: $orientation) {
                    @include css_property($property, $val);
                  }
                }
              }
            } @else {
              @if map-has-key($breakpoints, $screen) {
                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px') {
                  @include css_property($property, $val);
                }
              } @else {
                @if $screen == all {
                  @include css_property($property, $val);
                } @else {
                  @media only screen and (#{$media-direction}-width: $screen + 'px') {
                    @include css_property($property, $val);
                  }
                }
              }
            }
          }
        }
      }
    } @else {
      @if $property == 'extend' {
        @extend #{unquote($value)} !optional;
      } @else {
        @include css_property($property, $value);
      }
    }
  }
}

;